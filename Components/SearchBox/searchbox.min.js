var searchbox = { init: function (t) { t.hasOwnProperty("maxLength") && (searchbox.attributes.maxLength = t.maxLength), t.hasOwnProperty("tableTarget") && (searchbox.attributes.table.target = t.tableTarget), t.hasOwnProperty("boxTarget") && (searchbox.attributes.box.target = t.boxTarget), t.hasOwnProperty("onChange") && (searchbox.events.onChange = t.onChange), t.hasOwnProperty("beforeSend") && (searchbox.events.beforeSend = t.beforeSend), null == searchbox.attributes.box.target && (searchbox.attributes.box.target = "searchbox"), null == searchbox.attributes.table.target && (searchbox.attributes.table.target = "searchtable"), searchbox.events.countTotalRows(), $(searchbox.attributes.box.target).keyup(function (t) { null != searchbox.events.beforeSend && searchbox.events.beforeSend(searchbox.attributes), searchbox.events.search(this.value) }) }, attributes: { totalRowsFound: 0, errorLog: [], maxLength: 0, table: { target: null, totalRows: 0 }, box: { target: null, length: 0 } }, events: { countTotalRows: function () { try { var t = 0; $("#" + searchbox.attributes.table.target + " tbody tr").each(function () { t += 1 }), searchbox.attributes.table.totalRows = t } catch (t) { console.log(t) } }, search: function (e) { if (e.length > searchbox.attributes.maxLength) { var a = 0; $("#" + searchbox.attributes.table.target + " tbody tr").each(function () { var t = !1; $(this).each(function () { 0 <= $(this).text().toLowerCase().indexOf(e.toLowerCase()) && (t = !0, a += 1) }), t ? $(this).show() : $(this).hide() }), searchbox.attributes.totalRowsFound = a } else $("#" + searchbox.attributes.table.target).find("tbody").find("tr").show(); null != searchbox.events.onChange && searchbox.events.onChange(searchbox.attributes) }, onChange: null, ajaxCallBack: null, beforeSend: null } };
//v 1.1